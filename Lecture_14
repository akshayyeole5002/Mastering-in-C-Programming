// Pointers Concept, Declaration, Intialization

// Define
/*
A Pointer ia s variable, that stores the memory address 
of another variable 
*/


// #Declaration
// int num;
// int *num; //asterisk 
  // Declaration Pointer
  
/*
  To decalare a pointer, use the data type followed by an 
  asterisk(*) and the pointer name.
  
*/

// #Intialization
 
// int num = 10;
// int *ptr = &num;  //& memory address

/*
Initialize a pointer by assigning the address of a variable
 to it 
*/

// Pointer assignment 

/*
Assigning a pointer involves storing the memory address 
of another variable into it.

*/

// int *ptr1, *ptr2;
// ptr1 = ptr2

// Example 1: Intialization & Accessing value.

/*
#include <stdio.h>
#include <string.h> 
int main(){
    
    int num = 52;
    int *ptr = &num;
    printf("%d\n", *ptr);
    
     
    //Initialize a pointer with the address of 'num' and
    // points the value pointed to by 'ptr'

    return 0;
}

*/

// Advantages of pointer:

/*
1) Memory  efficiency
   (save space and improve performance)
   
2) Dynamic memory Allocation
   (malloc and free => Function)
   (// Data structure: Array, string, linked ist,.... )
   
3) Direct memory Accessing  

4) Efficient string handling

5) Function Pointers

6) Efficient data structure

7) Array manipulation

8) Passing parameters

*/

// Example 2: Pointer assignment

/*

#include <stdio.h>
#include <string.h> 
int main (){
    
    int a = 5, b = 10;
    int *ptr1 = &a, *ptr2 = &b; //*ptr1 = 5 *ptrr2 = 10
    ptr1 = ptr2;   // 5 = 10
    
    printf("%d\n", *ptr1);   //10
    
    a = b;   //5 => 10
    
    printf("%d",a);
    
    return 0;
}

*/

/*

'ptr1' now points to the same locations as 'ptr2',
printing the values at that location. 

*/


// Example 3: Pointer Arithmetaic 


/*

#include <stdio.h>
#include <string.h>
int main(){
    
    int arr[] = {1,2,3,4,5};
    int *ptr = arr;
    printf("%d\n", (*ptr + 2));
    // Advances the ponter by 2 positions and prints the value.
    
    return 0;
}

*/


// Example 4: 

/*

#include <stdio.h>
#include <string.h>
int main(){
    
    // Declare and Initialize an integer variable
    int num = 45;
    
    // Declare a pointer and assign the address of the variable
    // 'num' to it 
    
    int *ptr = &num;
    // print the value of 'num' and the value pointed to by 'ptr'.
    printf("Value of num: %d\n",num);  // 45
    printf("Value pointed to by ptr: %d\n",*ptr);  //45  
    
    // modify the value through the pointer
    *ptr = 100;  // dereference operator 
    
    // Print the updated value of 'num'
    printf("Updated value of num:%d\n",num); //100
    
    
    return 0;
}

*/
Dereference operator :
When indirection operator (*) is used with the pointer variable, 
then it is known as dereferencing a pointer.
*/

// Example 5:

/*

#include <stdio.h>
#include <string.h>

int main() {
    // Declare and initialize two integer variables
    int a = 5, b = 10, temp;

    // Print the original values of 'a' and 'b'
    printf("Original values: a = %d, b = %d\n", a, b);

    // Use a pointer to swap the values of 'a' and 'b'
    int *ptrA = &a;
    int *ptrB = &b;

    temp = *ptrA;
    *ptrA = *ptrB;
    *ptrB = temp;

    // Print the values after swapping
    printf("Values after swapping: a = %d, b = %d\n", a, b);

    return 0;
}


*/

